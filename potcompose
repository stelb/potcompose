#!/usr/bin/python3

import yaml

def create_pot(name, flavour):
  print("pot create -p %s -f %s -b %s -N %s"%(name,flavour,defbase,defnet))

def create_volume(v):
  if 'type' not in v or v['type'] == 'fscomp':
    print ("pot ls -f | grep %s || pot create-fscomp -f %s"%(v['source'], v['source']))
  else:
    print("# %s not supported yet"%(v['type']))

def mount_volume(v):
  if 'type' not in v or v['type'] == 'fscomp':
    print ("pot mount-in -p %s -f %s -m %s"%(s, v['source'], v['target']))
  else:
    print("# %s not supported yet"%(v['type']))

def create_ports(ports):
  map = ''
  for p in ports:
    if 'published' in p:
      published = p['published']
    else:
      published = p['target']
    map = " -e %i:%i"%(p['target'], published) + map
  print("pot export-ports -p %s %s"%(s, map))

def service(svc):
  if 'volumes' in svc:
    for v in svc['volumes']:
      create_volume(v)

  if 'ports' in svc:
    create_ports(svc['ports'])

  if 'flavour' in svc:
    flavour = svc['flavour']
    create_pot(s, flavour)
  else:
    print("# no flavour") 

  if 'volumes' in svc:
    for v in svc['volumes']:
      mount_volume(v)
  else:
    print("# no volumes")
      

stream = open('potcompose.yml')
compose = yaml.safe_load(stream)

defbase = compose['defaults']['base']
if 'network' in compose['defaults']:
  defnet = compose['defaults']['network']
else:
  defnet = 'public-bridge'

for s in compose['services']:
  print("# %s"%s)

  serviceconfig=compose['services'][s]

  if serviceconfig:
    service(serviceconfig)



